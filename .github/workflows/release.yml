name: Reusable Release Workflow

on:
  workflow_call:
    inputs:
      artifacts_path:
        description: 'Path to artifacts directory'
        required: false
        type: string
jobs:
  build:
    name: Create Build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'
          cache: npm
          registry-url: 'https://npm.pkg.github.com/'

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install packages
        run: npm install

      - run: npm run build --if-present

      - name: Upload Build Artifact
        if: ${{ inputs.artifacts_path != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: ${{ inputs.artifacts_path }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Build Artifact
        if: ${{ inputs.artifacts_path != '' }}
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: ${{ inputs.artifacts_path }}

      - name: Setup environment
        id: vars
        run: |
          echo "PACKAGE_NAME=$(jq -r .name package.json)" >> $GITHUB_ENV
          echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

      - name: Composer install
        run: |
          composer install --no-dev --no-interaction --prefer-dist --optimize-autoloader

      - name: Zip Release Asset
        id: zip
        run: |
          npm install
          npm run plugin-zip
          mv "$PACKAGE_NAME"{.zip,"-$VERSION.zip"}
          echo "zip_path=$PACKAGE_NAME-$VERSION" >> $GITHUB_OUTPUT
        working-directory: ${{ github.workspace }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ${{ steps.zip.outputs.zip_path }}.zip


